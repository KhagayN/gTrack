How to Graph Structural Variations
=====================================



.. sourcecode:: r
    

    ## make sure to load in these libraries
    library(gTrack)


::

    ## Loading required package: GenomicRanges



::

    ## Loading required package: BiocGenerics



::

    ## Loading required package: parallel



::

    ## 
    ## Attaching package: 'BiocGenerics'



::

    ## The following objects are masked from 'package:parallel':
    ## 
    ##     clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    ##     clusterExport, clusterMap, parApply, parCapply, parLapply,
    ##     parLapplyLB, parRapply, parSapply, parSapplyLB



::

    ## The following objects are masked from 'package:stats':
    ## 
    ##     IQR, mad, xtabs



::

    ## The following objects are masked from 'package:base':
    ## 
    ##     anyDuplicated, append, as.data.frame, cbind, colnames,
    ##     do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    ##     grepl, intersect, is.unsorted, lapply, lengths, Map, mapply,
    ##     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int,
    ##     Position, rank, rbind, Reduce, rownames, sapply, setdiff,
    ##     sort, table, tapply, union, unique, unsplit



::

    ## Loading required package: S4Vectors



::

    ## Loading required package: stats4



::

    ## 
    ## Attaching package: 'S4Vectors'



::

    ## The following objects are masked from 'package:base':
    ## 
    ##     colMeans, colSums, expand.grid, rowMeans, rowSums



::

    ## Loading required package: IRanges



::

    ## Loading required package: GenomeInfoDb



::

    ## 
    ## Attaching package: 'gTrack'



::

    ## The following object is masked from 'package:GenomicRanges':
    ## 
    ##     seqinfo<-



::

    ## The following object is masked from 'package:GenomeInfoDb':
    ## 
    ##     seqinfo<-


.. sourcecode:: r
    

    library(bamUtils) ## to use read.bam function 


::

    ## Loading required package: data.table



::

    ## data.table 1.9.6  For help type ?data.table or https://github.com/Rdatatable/data.table/wiki



::

    ## The fastest way to learn (by data.table authors): https://www.datacamp.com/courses/data-analysis-the-data-table-way



::

    ## 
    ## Attaching package: 'data.table'



::

    ## The following object is masked from 'package:GenomicRanges':
    ## 
    ##     shift



::

    ## The following object is masked from 'package:IRanges':
    ## 
    ##     shift



::

    ## Loading required package: Rsamtools



::

    ## Loading required package: Biostrings



::

    ## Loading required package: XVector



::

    ## Loading required package: rtracklayer



::

    ## 
    ## Attaching package: 'rtracklayer'



::

    ## The following object is masked _by_ '.GlobalEnv':
    ## 
    ##     import.ucsc



::

    ## Loading required package: GenomicAlignments



::

    ## Loading required package: SummarizedExperiment



::

    ## Loading required package: Biobase



::

    ## Welcome to Bioconductor
    ## 
    ##     Vignettes contain introductory material; view with
    ##     'browseVignettes()'. To cite Bioconductor, see
    ##     'citation("Biobase")', and for packages 'citation("pkgname")'.



::

    ## 
    ## Attaching package: 'GenomicAlignments'



::

    ## The following object is masked from 'package:data.table':
    ## 
    ##     last



::

    ## 
    ## Attaching package: 'bamUtils'



::

    ## The following objects are masked _by_ '.GlobalEnv':
    ## 
    ##     bam.cov.gr, bam.cov.tile, bamflag, bamtag, count.clips,
    ##     countCigar, counts2rpkm, get_seq, get.pairs.grl, read.bam,
    ##     splice.cigar, varbase




.. sourcecode:: r
    

    options(warn=-1)
    ## this load sequences that have had coverage calculated from cancer cell lines (GRanges object, have to make into a gTrack)
    cov = readRDS('../../inst/extdata/coverage.rds')
    
    ## wrap a gTrack around this, draw with blue circles, and label the track "Cov" and sets 0 as lower bound for all views 
    gt.cov = gTrack(cov, y.field = 'mean', circles = TRUE, col = 'blue', name = 'Cov')
    
    ## this loads the junctions data from the cell line (GRangesList, where each item is a length 2 GRanges
    ## with strand information specifying the two locations and strands that are being fused) 
    junctions = readRDS('../../inst/extdata/junctions.rds')
    
    ## loading the GENCODE gene model gTrack (hg19 pre-loaded comes with gTrack,
    ## but can be made from any .gff file from GENCODE (http://www.gencodegenes.org/releases/19.html)
    gt.ge = track.gencode()


::

    ## Pulling gencode annotations from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/gTrack/extdata/gencode.composite.collapsed.rds


.. sourcecode:: r
    

    ## this loads a gTrack object of a genome graph i.e. network of the same cancer cell line (generated by JaBba)
    graph = readRDS('../../inst/extdata/graph.rds')
    
    ## pick an interesting junction and plot the genes, coverage, and genome graph around it
    ## the links argument specifies the junctions that are being drawn
    window = junctions[[290]] + 1e5



.. sourcecode:: r
    

    plot(c(gt.ge, gt.cov, graph), window, links = junctions)

.. figure:: figure/plot-firstSV-1.png
    :alt: plot of chunk plot-firstSV

    plot of chunk plot-firstSV


.. sourcecode:: r
    

    ix = 194
    cwindow = junctions[[ix]]
    
    jix = c(582, 583)
    window = unlist(junctions[jix]) + 3e5
    
    ## convert junctions to a data frame. values() returns values from the hash which is the junctions object, in this example.
    values(junctions)$col = 'gray'
    values(junctions)$lwd = 1
    values(junctions)$lty = 2 ## dashed instead of dotted line style
    values(junctions)$col[jix] = 'red'
    values(junctions)$lwd[jix] = 3 ## thicker line width
    values(junctions)$lty[jix] = 1 ## solid line style for junction of interest



.. sourcecode:: r
    

    plot(c(gt.ge, gt.cov, graph), window, links = junctions)

.. figure:: figure/plot2ndgraph-1.png
    :alt: plot of chunk plot2ndgraph

    plot of chunk plot2ndgraph

Graping BAM data
~~~~~~~~~~~~~~~~


.. sourcecode:: r
    

    ## 4 windows corresponding to the 4 breakpoints involved in these two rearrangements.
    window = unlist(junctions[jix]) + 250
    
    ## pull the reads out in these windows from the tumor and normal bam file.
    treads = read.bam("../../inst/extdata/files/tumor.bam", window)
    nreads = read.bam("../../inst/extdata/files/normal.bam", window)
    
    ## make them into gTracks
    td.treads = gTrack(treads, draw.var = TRUE, name = 'Tumor reads')
    td.nreads = gTrack(nreads, draw.var = TRUE, name = 'Normal reads')



.. sourcecode:: r
    

    plot(c(gt.ge, td.nreads, td.treads), window, links = junctions)

.. figure:: figure/graph_BAM_data-1.png
    :alt: plot of chunk graph_BAM_data

    plot of chunk graph_BAM_data


.. sourcecode:: r
    

    ## dividing tumor read pairs between those that support a rearrangement (i.e. hit multiple windows)
    ## and concordant read pairs that lie only within a single window
    
    ## isolating normal
    nreadsr = nreads[grl.in(nreads, window, logical = FALSE)>1]
    nreadsc = nreads[grl.in(nreads, window, logical = FALSE)==1]
    
    td.treadsr = gTrack(treadsr, draw.var = TRUE, name = 'Tumor reads R', height = 30, angle = 45)


::

    ## Error in listify(data, GRanges): object 'treadsr' not found


.. sourcecode:: r
    

    td.nreadsr = gTrack(nreadsr, draw.var = TRUE, name = 'Normal reads R')
    td.treadsc = gTrack(treadsc, draw.var = TRUE, name = 'Tumor reads C')


::

    ## Error in listify(data, GRanges): object 'treadsc' not found


.. sourcecode:: r
    

    td.nreadsc = gTrack(nreadsc, draw.var = TRUE, name = 'Normal reads C')



.. sourcecode:: r
    

    plot(c(gt.ge, td.nreadsc, td.nreadsr, td.treadsc, td.treadsr), window, links = junctions)


::

    ## Error in plot(c(gt.ge, td.nreadsc, td.nreadsr, td.treadsc, td.treadsr), : object 'td.treadsc' not found



